# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: DockerHub Deploy Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10

      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

      - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Build the Docker image
      run: |
        docker build -t my-flask-app .

    - name: Run the Flask application
      run: |
        docker run -d -p 5000:5000 --name flaskapp my-flask-app

    - name: Run tests in the Docker container
      run: |
        docker run --rm my-flask-app python -m unittest discover

    - name: Cleanup
      if: always()
      run: docker rm -f flaskapp

  push_to_registry:
    needs: test
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest

    if : github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: bribrix/second_repository
      
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
